use crate::utils::{double_round, little_endian, little_endian_inv};

pub(crate) fn salsa20_encrypt(k0: [u8; 16], k1: [u8; 16], v: [u8; 16], m: [u8; 64]) -> [u8; 64] {
    let expanded = salsa20_expand(k0, k1, v);

    let mut result: [u8; 64] = [0; 64];
    for (i, item) in expanded.iter().enumerate() {
        result[i] = item ^ m[i];
    }

    result
}

fn salsa20_hash(x: [u8; 64]) -> [u8; 64] {
    let x0 = little_endian([x[0], x[1], x[2], x[3]]);
    let x1 = little_endian([x[4], x[5], x[6], x[7]]);
    let x2 = little_endian([x[8], x[9], x[10], x[11]]);
    let x3 = little_endian([x[12], x[13], x[14], x[15]]);
    let x4 = little_endian([x[16], x[17], x[18], x[19]]);
    let x5 = little_endian([x[20], x[21], x[22], x[23]]);
    let x6 = little_endian([x[24], x[25], x[26], x[27]]);
    let x7 = little_endian([x[28], x[29], x[30], x[31]]);
    let x8 = little_endian([x[32], x[33], x[34], x[35]]);
    let x9 = little_endian([x[36], x[37], x[38], x[39]]);
    let x10 = little_endian([x[40], x[41], x[42], x[43]]);
    let x11 = little_endian([x[44], x[45], x[46], x[47]]);
    let x12 = little_endian([x[48], x[49], x[50], x[51]]);
    let x13 = little_endian([x[52], x[53], x[54], x[55]]);
    let x14 = little_endian([x[56], x[57], x[58], x[59]]);
    let x15 = little_endian([x[60], x[61], x[62], x[63]]);

    let mut z = [
        x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15,
    ];
    for _ in 0..10 {
        z = double_round(z);
    }

    let r0 = little_endian_inv(z[0].wrapping_add(x0));
    let r1 = little_endian_inv(z[1].wrapping_add(x1));
    let r2 = little_endian_inv(z[2].wrapping_add(x2));
    let r3 = little_endian_inv(z[3].wrapping_add(x3));
    let r4 = little_endian_inv(z[4].wrapping_add(x4));
    let r5 = little_endian_inv(z[5].wrapping_add(x5));
    let r6 = little_endian_inv(z[6].wrapping_add(x6));
    let r7 = little_endian_inv(z[7].wrapping_add(x7));
    let r8 = little_endian_inv(z[8].wrapping_add(x8));
    let r9 = little_endian_inv(z[9].wrapping_add(x9));
    let r10 = little_endian_inv(z[10].wrapping_add(x10));
    let r11 = little_endian_inv(z[11].wrapping_add(x11));
    let r12 = little_endian_inv(z[12].wrapping_add(x12));
    let r13 = little_endian_inv(z[13].wrapping_add(x13));
    let r14 = little_endian_inv(z[14].wrapping_add(x14));
    let r15 = little_endian_inv(z[15].wrapping_add(x15));

    [
        r0[0], r0[1], r0[2], r0[3], //
        r1[0], r1[1], r1[2], r1[3], //
        r2[0], r2[1], r2[2], r2[3], //
        r3[0], r3[1], r3[2], r3[3], //
        r4[0], r4[1], r4[2], r4[3], //
        r5[0], r5[1], r5[2], r5[3], //
        r6[0], r6[1], r6[2], r6[3], //
        r7[0], r7[1], r7[2], r7[3], //
        r8[0], r8[1], r8[2], r8[3], //
        r9[0], r9[1], r9[2], r9[3], //
        r10[0], r10[1], r10[2], r10[3], //
        r11[0], r11[1], r11[2], r11[3], //
        r12[0], r12[1], r12[2], r12[3], //
        r13[0], r13[1], r13[2], r13[3], //
        r14[0], r14[1], r14[2], r14[3], //
        r15[0], r15[1], r15[2], r15[3], //
    ]
}

fn salsa20_expand(k0: [u8; 16], k1: [u8; 16], n: [u8; 16]) -> [u8; 64] {
    // Nothing-up-my-sleeve number "expand 32-byte k" in ASCII.
    let sigma0 = [101, 120, 112, 97];
    let sigma1 = [110, 100, 32, 51];
    let sigma2 = [50, 45, 98, 121];
    let sigma3 = [116, 101, 32, 107];

    salsa20_hash([
        sigma0[0], sigma0[1], sigma0[2], sigma0[3], //
        k0[0], k0[1], k0[2], k0[3], k0[4], k0[5], k0[6], k0[7], //
        k0[8], k0[9], k0[10], k0[11], k0[12], k0[13], k0[14], k0[15], //
        sigma1[0], sigma1[1], sigma1[2], sigma1[3], //
        n[0], n[1], n[2], n[3], n[4], n[5], n[6], n[7], //
        n[8], n[9], n[10], n[11], n[12], n[13], n[14], n[15], //
        sigma2[0], sigma2[1], sigma2[2], sigma2[3], //
        k1[0], k1[1], k1[2], k1[3], k1[4], k1[5], k1[6], k1[7], //
        k1[8], k1[9], k1[10], k1[11], k1[12], k1[13], k1[14], k1[15], //
        sigma3[0], sigma3[1], sigma3[2], sigma3[3], //
    ])
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn salsa20_hash_basic() {
        assert_eq!(
            salsa20_hash([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0
            ]),
            [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0
            ]
        );
        assert_eq!(
            salsa20_hash([
                211, 159, 13, 115, 76, 55, 82, 183, 3, 117, 222, 37, 191, 187, 234, 136, 49, 237,
                179, 48, 1, 106, 178, 219, 175, 199, 166, 48, 86, 16, 179, 207, 31, 240, 32, 63,
                15, 83, 93, 161, 116, 147, 48, 113, 238, 55, 204, 36, 79, 201, 235, 79, 3, 81, 156,
                47, 203, 26, 244, 243, 88, 118, 104, 54
            ]),
            [
                109, 42, 178, 168, 156, 240, 248, 238, 168, 196, 190, 203, 26, 110, 170, 154, 29,
                29, 150, 26, 150, 30, 235, 249, 190, 163, 251, 48, 69, 144, 51, 57, 118, 40, 152,
                157, 180, 57, 27, 94, 107, 42, 236, 35, 27, 111, 114, 114, 219, 236, 232, 135, 111,
                155, 110, 18, 24, 232, 95, 158, 179, 19, 48, 202
            ]
        );
        assert_eq!(
            salsa20_hash([
                88, 118, 104, 54, 79, 201, 235, 79, 3, 81, 156, 47, 203, 26, 244, 243, 191, 187,
                234, 136, 211, 159, 13, 115, 76, 55, 82, 183, 3, 117, 222, 37, 86, 16, 179, 207,
                49, 237, 179, 48, 1, 106, 178, 219, 175, 199, 166, 48, 238, 55, 204, 36, 31, 240,
                32, 63, 15, 83, 93, 161, 116, 147, 48, 113
            ]),
            [
                179, 19, 48, 202, 219, 236, 232, 135, 111, 155, 110, 18, 24, 232, 95, 158, 26, 110,
                170, 154, 109, 42, 178, 168, 156, 240, 248, 238, 168, 196, 190, 203, 69, 144, 51,
                57, 29, 29, 150, 26, 150, 30, 235, 249, 190, 163, 251, 48, 27, 111, 114, 114, 118,
                40, 152, 157, 180, 57, 27, 94, 107, 42, 236, 35
            ]
        );
    }

    #[test]
    fn salsa20_expand_basic() {
        assert_eq!(
            salsa20_expand(
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116],
            ),
            [
                69, 37, 68, 39, 41, 15, 107, 193, 255, 139, 122, 6, 170, 233, 217, 98, 89, 144,
                182, 106, 21, 51, 200, 65, 239, 49, 222, 34, 215, 114, 40, 126, 104, 197, 7, 225,
                197, 153, 31, 2, 102, 78, 76, 176, 84, 245, 246, 184, 177, 160, 133, 130, 6, 72,
                149, 119, 192, 195, 132, 236, 234, 103, 246, 74
            ]
        )
    }

    #[test]
    fn salsa20_encrypt_basic() {
        assert_eq!(
            salsa20_encrypt(
                [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216],
                [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116],
                [
                    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
                    23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
                    43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
                    63, 64
                ],
            ),
            [
                68, 39, 71, 35, 44, 9, 108, 201, 246, 129, 113, 10, 167, 231, 214, 114, 72, 130,
                165, 126, 0, 37, 223, 89, 246, 43, 197, 62, 202, 108, 55, 94, 73, 231, 36, 197,
                224, 191, 56, 42, 79, 100, 103, 156, 121, 219, 217, 136, 128, 146, 182, 182, 51,
                126, 162, 79, 249, 249, 191, 208, 215, 89, 201, 10
            ]
        )
    }
}
